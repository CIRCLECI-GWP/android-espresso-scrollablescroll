version: 2.1

orbs:
  android: circleci/android@3.0.1

executors:
  android-machine-executor:
    machine:
      image: ubuntu-2004:2023.07.1
    resource_class: medium # Adjust based on your plan (options: medium, large, xlarge)

jobs:
  build-library:
    executor: android-machine-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - gradle-cache-v1-{{ checksum "build.gradle" }}
            - gradle-cache-v1-
      - run:
          name: Assemble library
          command: ./gradlew clean assemble
      - save_cache:
          paths:
            - ~/.gradle/caches/
          key: gradle-cache-v1-{{ checksum "build.gradle" }}

  deploy-to-sonatype:
    executor: android-machine-executor
    steps:
      - checkout
      - run:
          name: Define ORG_GRADLE_PROJECT_LIBRARY_VERSION Environment Variable at Runtime
          command: |
            if [ $CIRCLE_TAG ]
            then
              echo 'export ORG_GRADLE_PROJECT_LIBRARY_VERSION=$CIRCLE_TAG' >> $BASH_ENV
            else
              echo "export ORG_GRADLE_PROJECT_LIBRARY_VERSION=$(git tag | tail -1)-SNAPSHOT" >> $BASH_ENV
            fi
            source $BASH_ENV
      - run:
          name: Inject Maven signing key
          command: |
            echo "$GPG_SIGNING_KEY" \
              | awk 'NR == 1 { print "SIGNING_KEY=" } 1' ORS='\\n' \
              >> gradle.properties
            source $BASH_ENV
          when: always
      - run:
          name: Publish to Maven
          command: ./gradlew assemble publishToSonatype closeAndReleaseSonatypeStagingRepository

  run-ui-tests:
    executor: android-machine-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - android-sdk-v2
      - run:
          name: Set Up Android SDK
          command: |
            if [ ! -d "/usr/local/android-sdk/platforms/android-29" ]; then
              sudo apt-get update
              sudo apt-get install -y wget unzip
              wget https://dl.google.com/android/repository/commandlinetools-linux-8512546_latest.zip -O commandlinetools.zip
              sudo mkdir -p /usr/local/android-sdk/cmdline-tools
              sudo unzip -q commandlinetools.zip -d /usr/local/android-sdk/cmdline-tools
              sudo mv /usr/local/android-sdk/cmdline-tools/cmdline-tools /usr/local/android-sdk/cmdline-tools/latest
              export ANDROID_SDK_ROOT=/usr/local/android-sdk
              echo 'export ANDROID_SDK_ROOT=/usr/local/android-sdk' >> $BASH_ENV
              echo 'export PATH=$PATH:$ANDROID_SDK_ROOT/cmdline-tools/latest/bin:$ANDROID_SDK_ROOT/platform-tools' >> $BASH_ENV
              source $BASH_ENV
              # Manually accept licenses
              mkdir -p $ANDROID_SDK_ROOT/licenses
              echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > $ANDROID_SDK_ROOT/licenses/android-sdk-license
              echo "84831b9409646a918e30573bab4c9c91346d8abd" > $ANDROID_SDK_ROOT/licenses/android-sdk-preview-license
              # Install SDK components
              sdkmanager --install 'platform-tools' 'platforms;android-29' 'build-tools;29.0.3' 'system-images;android-29;google_apis;x86_64' --sdk_root=$ANDROID_SDK_ROOT
            else
              echo "Android SDK already installed."
            fi
      - save_cache:
          paths:
            - /usr/local/android-sdk
          key: android-sdk-v2
      - run:
          name: Create AVD
          command: |
            export ANDROID_SDK_ROOT=/usr/local/android-sdk
            avdmanager create avd -n test -k 'system-images;android-29;google_apis;x86_64' --device 'pixel' --force
      - run:
          name: Start Emulator
          command: |
            export ANDROID_SDK_ROOT=/usr/local/android-sdk
            emulator -avd test -no-window -no-audio -no-boot-anim -accel on &
            adb wait-for-device
            boot_completed=""
            timeout_in_sec=300
            while [[ "$boot_completed" != "1" && $timeout_in_sec -gt 0 ]]; do
              sleep 5
              timeout_in_sec=$((timeout_in_sec - 5))
              boot_completed=$(adb shell getprop sys.boot_completed 2>&1 | tr -d '\r')
              echo "Waiting for emulator to boot... ($timeout_in_sec seconds left)"
            done
            if [[ "$boot_completed" != "1" ]]; then
              echo "Emulator failed to boot within expected time."
              exit 1
            fi
            echo "Emulator booted successfully!"
      - run:
          name: Unlock Screen
          command: adb shell input keyevent 82
      - run:
          name: Run UI Tests
          command: ./gradlew sample:connectedDebugAndroidTest

parameters:
  run-schedule:
    type: boolean
    default: false

workflows:
  build-test-deploy:
    when:
      not: << pipeline.parameters.run-schedule >>
    jobs:
      - run-ui-tests:
          filters:
            tags:
              only: /^[0-9]+.*/
      - hold-for-approval:
          type: approval
          requires:
            - run-ui-tests
          filters:
            tags:
              only: /^[0-9]+.*/
            branches:
              ignore: /.*/
      - deploy-to-sonatype:
          name: Deploy to Maven Central
          requires:
            - hold-for-approval
          filters:
            tags:
              only: /^[0-9]+.*/
  nightly-snapshot:
    when: << pipeline.parameters.run-schedule >>
    jobs:
      - run-ui-tests
      - deploy-to-sonatype:
          name: Deploy Snapshot to Sonatype
          requires:
            - run-ui-tests
